#%RAML 1.0
version: 1.0 alpha 1
title: MTSGO Client API
mediaType: application/json
###########################################
#		 	Type Definitions			  #
###########################################
types:
  Question:
    properties:
      id:
        type: integer
        description: Identifiant unique de la question
      question:
        type: string
        description: Texte de la question
      rep1:
        type: string
        description: Réponse 1
      rep2:
        type: string
        description: Réponse 2
      rep3:
        type: string
        description: Réponse 3
      rep4:
        type: string
        description: Réponse 4
      score:
        type: integer
        description: Score attribué si le joueur répond correctement.
      difficulty:
        type: integer
        description: Difficulté de la question.
      position:
        type: integer []
        description: Position de la question
  QuestionList:
    type: object
    properties:
      questions:
        type: Question[]
  Answer:
    properties:
      qid:
        type: integer
        description: Identifiant de la question à laquelle on veut répondre.
      answ_number:
        type: integer
        description: Le numéro de la réponse choisie.
  Map:
    properties:
      version:
        type: integer
        description: Version de la map
      uri:
        type: string
        description: URI de de la dernière version de map
  Credentials:
    properties:
      username:
        type: string
        description: Nom de l'utilisateur
      passhash:
        type: string
        description: Mot de passe en clair.
  Token:
    properties:
      user_id:
        type: integer
        description: ID de l'utilisateur en cours.
      token:
        type: string
        description: Le jeton d'authentification.
  SignupCredentials:
    properties:
      username:
        type: string
        description: Nom d'utilisateur
      passwd:
        type: string
        description: Mot de passe en clair.
      email:
        type: string
        description: E-Mail de l'utilisateur
  Account:
    type: object
    properties:
      id:
        type: integer
        description: Identifiant unique du compte.
      username:
        type: string
        description: Nom de l'utilisateur.
      score:
        type: integer
        description: Score que le joueur a accumulé.
  PositionJoueur:
    type: object
    properties:
      x: integer
      y: integer
      z: integer
  HistoryEntry:
    type: object
    properties:
      question:
        type: string
        description: Enoncé de la question.
      score:
        type: integer
        description: Score apporté par cette question.
      difficulty:
        type: integer
        description: Difficulté de la question.
      topic:
        type: string
        description: Domaine de la question.
  History:
    type: object
    properties:
      history:
        type: HistoryEntry[]
  PlayerStats:
    type: object
    properties:
      username:
        type: string
        description: Nom de l'utilisateur.
      score:
        type: integer
        description: Score du joueur.
      rang:
        type: integer
        description: Rand du joueur _(non implémenté pour le moment, retourne un -1)

/auth:
  description: Interface pour l'inscription et l'authentification.
  /:
    description: Interface pour authentification.
    post:
      description: Obtenir un jeton d'authentification
      queryParameters:
        application/json:
            type: Credentials
            description: Identifiants de l'utilisateur
      responses:
        200:
          description: Dans le cas ou le couple login/mot de passe est correct.
          body:
              type: Token
              description: Le jeton d'authentification pour la session.
        403:
          description: Dans le cas ou le couple login/mot de passe est incorrect.
  /new/:
    description: Interface pour l'inscription
    post:
      description: Inscrire un compte
      queryParameters:
        creds:
          type: SignupCredentials
          description: Paramètres du compte qu'on veut créer
      responses:
        200:
          description: Dans le cas où le compte a été créé correctement.
        401:
          description: Dans le cas où la création du compte a échoué.
          body:
            application/text:
              description: Message d'erreur
/map:
  description: Interface pour obtention de la dernière version de la map.
  get:
    description: Obtenir la dernière version de la map.
    responses:
      200:
        body:
          type: Map
          description: Dernière version de la map accompagnée de son lien.
/position/:
  description: Interface pour mettre à jour à la position du joueur.
  post:
    description: Mettre à jour la position du joueur.
    queryParameters:
      position:
        type: PositionJoueur
        description: Player position
    responses:
      200:
          description: La mise à jour s'est faite correctement.
      401:
          description: Une erreur a eu lieu lors de la mise à jour.
          body:
            application/json:
              type: string
              description: Message d'erreur
      403:
          description: Authentification impossible.
/questions:
  description: Interface pour obtenir les questions environnantes et essayer d'y répondre.
  get:
    description: |
      Obtenir les questions proches du joueur.
      __Attention,__ Dans des requêtes GET, on parle exclusivement de paramètres GET.
    queryParameters:
      user_id:
        type: integer
        description: L'id utilisateur que vous avez obtenu.
      token:
        type: string
        description: Le jeton d'authentification que vous avez obtenu.
    responses:
      200:
        body:
          type: QuestionList
          description: Une liste des questions proches du joueurs.
      403:
          description: Authentification impossible.
  post:
    description: Tenter de répondre à une question
    queryParameters:
      user_id:
        type: integer
        description: L'id utilisateur que vous avez obtenu.
      token:
        type: string
        description: Le jeton d'authentification que vous avez obtenu.
      answer:
        type: Answer
        description: Réponse à la question
    responses:
      200:
        description: Réponse correcte
      403:
        description: Authentification impossible.
      401:
        description: Paramètres de requêtes incorrects.
        body:
          application/json:
            type: string
            description: Message d'erreur.
      402:
        description: Mauvaise réponse.
  /{question_id}/:
    get:
      description: Obtenir les détails d'une question identifiée par __question_id__. __Attention,__ Dans des requêtes GET, on parle exclusivement de paramètres GET.
      queryParameters:
        user_id:
          type: integer
          description: L'id utilisateur que vous avez obtenu.
        token:
          type: string
          description: Le jeton d'authentification que vous avez obtenu.
      responses:
        200:
          body:
            type: Question
            description: Détails de la question
        404:
          description: Question non trouvée.
        403:
          description: Authentification impossible.
/history/:
  description: Obtenir l'historique des dernières questions répondues dans le jeu.
  get:
    description: |
      Obtenir l'historique des dernières questions répondues dans le jeu.
      _(Le nombre de dernières questions est configurable dans le serveur)_.
      __Attention,__ Dans des requêtes GET, on parle exclusivement de paramètres GET.
    queryParameters:
      user_id:
        type: integer
        description: L'id utilisateur que vous avez obtenu.
      token:
        type: string
        description: Le jeton d'authentification que vous avez obtenu.
    responses:
      200:
        body:
          type: History
      403:
          description: Authentification impossible.
/player/:
  description: Obtenir les informations sur le joueur.
  get:
    description: |
      Obtient les informations sur le joueur.
      __Attention,__ Dans des requêtes GET, on parle exclusivement de paramètres GET.
    queryParameters:
        user_id:
          type: integer
          description: L'id utilisateur que vous avez obtenu.
        token:
          type: string
          description: Le jeton d'authentification que vous avez obtenu.
    responses:
        200:
          body:
            type: PlayerStats
        403:
          description: Authentification impossible.